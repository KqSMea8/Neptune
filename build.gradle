apply plugin: 'com.android.library'
apply plugin: 'maven'
apply from: './maven_push.gradle'

buildscript {
    repositories {
        jcenter()
        maven {
            url="http://maven.mbd.qiyi.domain/nexus/content/repositories/mbd-vertical/"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.2'
    }
}

uploadArchives {
    repositories.mavenDeployer {
        repository(url: "http://maven.mbd.qiyi.domain/nexus/content/repositories/mbd-vertical/")
        pom.groupId = "com.qiyi.video.plugin"
        pom.artifactId = "pluginsdk"
        pom.version = "1.0" }
}

dependencies {
    provided files('libs/android-support-v4.jar')
}

android {
    compileSdkVersion 24
    buildToolsVersion '24.0.2'
    lintOptions {
        abortOnError false
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 23
    }
    dexOptions {
        javaMaxHeapSize "2g"
        jumboMode true
    }
//    buildTypes {
//        debug {
//            minifyEnabled false
//            proguardFile('proguard.cfg')
//        }
//        release {
//            minifyEnabled true
//            proguardFile('proguard.cfg')
//        }
//    }
    packagingOptions {
        exclude('META-INF/DEPENDENCIES')
        exclude('META-INF/NOTICE')
        exclude('META-INF/LICENSE')
    }
    lintOptions {
        // Or, if you prefer, you can continue to check for errors in release builds,
        checkReleaseBuilds false
        // but continue the build even when errors are found:
        abortOnError false
    }
    def target = new File(project.buildDir.toString()+"/libs");

    task clearJar(type: Delete) {
        delete "${target}/libplugin.jar"
        delete "${project.projectDir}/MANIFEST.MF"
    }

    //在基线8.7版本开始废弃，通过gradle uploadArchives上传aar到maven服务器,
    task makeJar(type: Copy) {
        from('build/intermediates/bundles/debug/')
        into(target)
        include('classes.jar')
        rename('classes.jar', 'libplugin.jar')
        doLast{
            updateManifestMFInfo(getGitChangeId(), 'libplugin.jar', target)
        }

    }
    makeJar.dependsOn(clearJar, build)
}

/**
 * 更新MANIFEST.MF信息
 */
def updateManifestMFInfo(def changeId, def jarName, def target) {
    def manifestmf = 'MANIFEST.MF';
    println project.getProjectDir().getAbsolutePath()
    File mf = new File(project.getProjectDir().getAbsolutePath() + "/" + manifestmf)
    mf.deleteOnExit()
    def time = new java.text.SimpleDateFormat("yyyyMMddHHmmss").format(new Date())
    println 'ChangeId: ' + changeId + '\nImplementation-Version: ' + time
    mf.write('ChangeId: ' + changeId + '\nImplementation-Version: ' + time)
    println 'Update ' + jarName + ' Manifest.mf'
    exec {
        executable = 'jar'
        workingDir "${target}"
        args = ['-uvfm', jarName, mf.getAbsolutePath()]
    }
    println 'Update ' + jarName + ' Manifest.mf end!'
}

/**
 * 获取change id版本号
 * @return
 */
def getGitChangeId() {
    def outputAsString
    new ByteArrayOutputStream().withStream { os ->
        exec {
            executable = 'git'
            args = ['log', '-1']
            standardOutput = os
        }
        outputAsString = os.toString()
        outputAsString = outputAsString.substring(outputAsString.indexOf('Change-Id: ') + 11)
        println 'ChangeId' + outputAsString
    }
    return outputAsString
}
