<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 2.3.3">

    <issue
        id="MergeMarker"
        severity="Error"
        message="Missing merge marker?"
        category="Correctness"
        priority="8"
        summary="Code contains merge marker"
        explanation="Many version control systems leave unmerged files with markers such as &lt;&lt;&lt; in the source code. This check looks for these markers, which are sometimes accidentally left in, particularly in resource files where they don&apos;t break compilation."
        errorLine1="&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:SdkLibrary/src/org/qiyi/pluginlibrary/Neptune.java"
        errorLine2="~~~~~~~">
        <location
            file="E:\workspace\QYPlugin\SdkLibrary\src\org\qiyi\pluginlibrary\Neptune.java"
            line="42"
            column="1"/>
    </issue>

    <issue
        id="MergeMarker"
        severity="Error"
        message="Missing merge marker?"
        category="Correctness"
        priority="8"
        summary="Code contains merge marker"
        explanation="Many version control systems leave unmerged files with markers such as &lt;&lt;&lt; in the source code. This check looks for these markers, which are sometimes accidentally left in, particularly in resource files where they don&apos;t break compilation."
        errorLine1="======="
        errorLine2="~~~~~~~">
        <location
            file="E:\workspace\QYPlugin\SdkLibrary\src\org\qiyi\pluginlibrary\Neptune.java"
            line="46"
            column="1"/>
    </issue>

    <issue
        id="MergeMarker"
        severity="Error"
        message="Missing merge marker?"
        category="Correctness"
        priority="8"
        summary="Code contains merge marker"
        explanation="Many version control systems leave unmerged files with markers such as &lt;&lt;&lt; in the source code. This check looks for these markers, which are sometimes accidentally left in, particularly in resource files where they don&apos;t break compilation."
        errorLine1=">>>>>>> sdk_open:SdkLibrary/src/org/qiyi/pluginlibrary/Neptune.java"
        errorLine2="~~~~~~~">
        <location
            file="E:\workspace\QYPlugin\SdkLibrary\src\org\qiyi\pluginlibrary\Neptune.java"
            line="47"
            column="1"/>
    </issue>

    <issue
        id="ApplySharedPref"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Use `apply()` on `SharedPreferences`"
        explanation="Consider using `apply()` instead of `commit` on shared preferences. Whereas `commit` blocks and writes its data to persistent storage immediately, `apply` will handle it in the background."
        errorLine1="        editor.commit();"
        errorLine2="        ~~~~~~~~~~~~~~~">
        <location
            file="E:\workspace\QYPlugin\SdkLibrary\src\org\qiyi\pluginlibrary\utils\MultiDexExtractor.java"
            line="264"
            column="9"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="            return string.toLowerCase();"
        errorLine2="                          ~~~~~~~~~~~">
        <location
            file="E:\workspace\QYPlugin\SdkLibrary\src\org\qiyi\pluginlibrary\utils\ReflectionUtils.java"
            line="660"
            column="27"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` *without specifying an explicit locale* is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is *not* `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="            return string.substring(0, 1).toLowerCase() + string.substring(1);"
        errorLine2="                                          ~~~~~~~~~~~">
        <location
            file="E:\workspace\QYPlugin\SdkLibrary\src\org\qiyi\pluginlibrary\utils\ReflectionUtils.java"
            line="662"
            column="43"/>
    </issue>

    <issue
        id="SdCardPath"
        severity="Warning"
        message="Do not hardcode &quot;`/data/`&quot;; use `Context.getFilesDir().getPath()` instead"
        category="Correctness"
        priority="6"
        summary="Hardcoded reference to `/sdcard`"
        explanation="Your code should not reference the `/sdcard` path directly; instead use `Environment.getExternalStorageDirectory().getPath()`.&#xA;&#xA;Similarly, do not reference the `/data/data/` path directly; it can vary in multi-user scenarios. Instead, use `Context.getFilesDir().getPath()`."
        url="http://developer.android.com/guide/topics/data/data-storage.html#filesExternal"
        urls="http://developer.android.com/guide/topics/data/data-storage.html#filesExternal"
        errorLine1="        String dbPath = &quot;/data/data/&quot; + this.getPackageName() + DATABASE_PATH;"
        errorLine2="                        ~~~~~~~~~~~~~">
        <location
            file="E:\workspace\QYPlugin\SdkLibrary\src\org\qiyi\pluginlibrary\context\CustomContextWrapper.java"
            line="426"
            column="25"/>
    </issue>

    <issue
        id="SdCardPath"
        severity="Warning"
        message="Do not hardcode &quot;`/data/`&quot;; use `Context.getFilesDir().getPath()` instead"
        category="Correctness"
        priority="6"
        summary="Hardcoded reference to `/sdcard`"
        explanation="Your code should not reference the `/sdcard` path directly; instead use `Environment.getExternalStorageDirectory().getPath()`.&#xA;&#xA;Similarly, do not reference the `/data/data/` path directly; it can vary in multi-user scenarios. Instead, use `Context.getFilesDir().getPath()`."
        url="http://developer.android.com/guide/topics/data/data-storage.html#filesExternal"
        urls="http://developer.android.com/guide/topics/data/data-storage.html#filesExternal"
        errorLine1="        String sharePath = &quot;/data/data/&quot; + this.getPackageName() + SHAREDPREF_PATH;"
        errorLine2="                           ~~~~~~~~~~~~~">
        <location
            file="E:\workspace\QYPlugin\SdkLibrary\src\org\qiyi\pluginlibrary\context\CustomContextWrapper.java"
            line="510"
            column="28"/>
    </issue>

    <issue
        id="SdCardPath"
        severity="Warning"
        message="Do not hardcode &quot;`/data/`&quot;; use `Context.getFilesDir().getPath()` instead"
        category="Correctness"
        priority="6"
        summary="Hardcoded reference to `/sdcard`"
        explanation="Your code should not reference the `/sdcard` path directly; instead use `Environment.getExternalStorageDirectory().getPath()`.&#xA;&#xA;Similarly, do not reference the `/data/data/` path directly; it can vary in multi-user scenarios. Instead, use `Context.getFilesDir().getPath()`."
        url="http://developer.android.com/guide/topics/data/data-storage.html#filesExternal"
        urls="http://developer.android.com/guide/topics/data/data-storage.html#filesExternal"
        errorLine1="        File sharePath = new File(&quot;/data/data/&quot; + this.getPackageName() + SHAREDPREF_PATH);"
        errorLine2="                                  ~~~~~~~~~~~~~">
        <location
            file="E:\workspace\QYPlugin\SdkLibrary\src\org\qiyi\pluginlibrary\context\CustomContextWrapper.java"
            line="530"
            column="35"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="    private static SimpleDateFormat formatter = new SimpleDateFormat(&quot;MM-dd HH:mm:ss:SSS&quot;);"
        errorLine2="                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\workspace\QYPlugin\SdkLibrary\src\org\qiyi\pluginlibrary\utils\PluginDebugLog.java"
            line="47"
            column="49"/>
    </issue>

    <issue
        id="ParcelClassLoader"
        severity="Warning"
        message="Using the default class loader will not work if you are restoring your own classes. Consider using for example `readBundle(getClass().getClassLoader())` instead."
        category="Correctness"
        priority="3"
        summary="Default Parcel Class Loader"
        explanation="The documentation for `Parcel#readParcelable(ClassLoader)` (and its variations) says that you can pass in `null` to pick up the default class loader. However, that ClassLoader is a system class loader and is not able to find classes in your own application.&#xA;&#xA;If you are writing your own classes into the `Parcel` (not just SDK classes like `String` and so on), then you should supply a `ClassLoader` for your application instead; a simple way to obtain one is to just call `getClass().getClassLoader()` from your own class."
        url="http://developer.android.com/reference/android/os/Parcel.html"
        urls="http://developer.android.com/reference/android/os/Parcel.html"
        errorLine1="        metaData = in.readBundle();"
        errorLine2="                      ~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="E:\workspace\QYPlugin\SdkLibrary\src\org\qiyi\pluginlibrary\pm\PluginPackageInfo.java"
            line="194"
            column="23"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Warning"
        message="Unnecessary; SDK_INT is always >= 14"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for."
        errorLine1="        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\workspace\QYPlugin\SdkLibrary\src\org\qiyi\pluginlibrary\component\stackmgr\PluginActivityControl.java"
            line="643"
            column="13"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Warning"
        message="Unnecessary; SDK_INT is always >= 14"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for."
        errorLine1="        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\workspace\QYPlugin\SdkLibrary\src\org\qiyi\pluginlibrary\component\stackmgr\PluginActivityControl.java"
            line="677"
            column="13"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Warning"
        message="Unnecessary; SDK_INT is always >= 14"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for."
        errorLine1="        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\workspace\QYPlugin\SdkLibrary\src\org\qiyi\pluginlibrary\component\stackmgr\PluginActivityControl.java"
            line="689"
            column="13"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Warning"
        message="Unnecessary; SDK_INT is always >= 14"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for."
        errorLine1="        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO) {"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\workspace\QYPlugin\SdkLibrary\src\org\qiyi\pluginlibrary\install\PluginInstallerService.java"
            line="587"
            column="13"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Warning"
        message="Unnecessary; SDK_INT is always >= 14"
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for."
        errorLine1="            } else if (Build.VERSION.SDK_INT >= 11) {"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\workspace\QYPlugin\SdkLibrary\src\org\qiyi\pluginlibrary\pm\PluginPackageInfo.java"
            line="504"
            column="24"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak (and also breaks Instant Run)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts."
        errorLine1="    private static Context sHostContext;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\workspace\QYPlugin\SdkLibrary\src\org\qiyi\pluginlibrary\Neptune.java"
            line="56"
            column="5"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields (static reference to `PluginCenterDebugHelper` which has field `context` pointing to `Context`); this is a memory leak (and also breaks Instant Run)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts."
        errorLine1="        static PluginCenterDebugHelper mInstance = new PluginCenterDebugHelper();"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="E:\workspace\QYPlugin\SdkLibrary\src\org\qiyi\pluginlibrary\debug\PluginCenterDebugHelper.java"
            line="21"
            column="9"/>
    </issue>

    <issue
        id="TypographyEllipsis"
        severity="Warning"
        message="Replace &quot;...&quot; with ellipsis character (…, &amp;#8230;) ?"
        category="Usability:Typography"
        priority="5"
        summary="Ellipsis string can be replaced with ellipsis character"
        explanation="You can replace the string &quot;...&quot; with a dedicated ellipsis character, ellipsis character (…, &amp;#8230;). This can help make the text more readable."
        url="http://en.wikipedia.org/wiki/Ellipsis"
        urls="http://en.wikipedia.org/wiki/Ellipsis"
        errorLine1="    &lt;string name=&quot;loading_plugin&quot;>正在加载插件...&lt;/string>"
        errorLine2="                                  ^"
        quickfix="studio">
        <location
            file="E:\workspace\QYPlugin\SdkLibrary\res\values\strings.xml"
            line="3"
            column="35"/>
    </issue>

    <issue
        id="TypographyEllipsis"
        severity="Warning"
        message="Replace &quot;...&quot; with ellipsis character (…, &amp;#8230;) ?"
        category="Usability:Typography"
        priority="5"
        summary="Ellipsis string can be replaced with ellipsis character"
        explanation="You can replace the string &quot;...&quot; with a dedicated ellipsis character, ellipsis character (…, &amp;#8230;). This can help make the text more readable."
        url="http://en.wikipedia.org/wiki/Ellipsis"
        urls="http://en.wikipedia.org/wiki/Ellipsis"
        errorLine1="    &lt;string name=&quot;under_recovery&quot;>恢复中...&lt;/string>"
        errorLine2="                                  ^"
        quickfix="studio">
        <location
            file="E:\workspace\QYPlugin\SdkLibrary\res\values\strings.xml"
            line="5"
            column="35"/>
    </issue>

</issues>
