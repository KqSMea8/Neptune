import com.android.builder.model.Version
import com.qiyi.plugin.utils.Utils

import java.text.SimpleDateFormat

apply plugin: 'com.android.application'

def isPluginBuild = Boolean.parseBoolean(PLUGIN_APK_COMPILE)

apply plugin: 'com.qiyi.neptune.plugin'

neptune {
    pluginMode = isPluginBuild
    packageId = 0x30
    hostPackageName = "com.qiyi.video"
    hostDependencies = "com.qiyi.video.allclasses:commonres_lib"
    dexModify = false
}

def getDate() {
    SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd-HH:mm:ss")
    return sdf.format(new Date())
}

android {
    compileSdkVersion COMPILE_SDK_VERSION
    buildToolsVersion BUILD_TOOLS_VERSION
    defaultConfig {
        applicationId "com.iqiyi.plugin.sample"
        minSdkVersion 14
        targetSdkVersion TARGET_SDK_VERSION
        versionCode 2
        versionName "1.2"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    dexOptions {
        //preDexLibraries false
    }

    buildTypes {
        debug {
            buildConfigField "String", "TIME", "\"${getDate()}\""
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs', "hostlibs"]
        }
    }

    android.applicationVariants.all { variant ->

        def fileName = defaultConfig.applicationId + ".apk"
        boolean highAGP = Utils.compareVersion(Version.ANDROID_GRADLE_PLUGIN_VERSION, "3.0.0") >= 0
        variant.outputs.each { output ->
            // 修改apk名称
            //def fileName = defaultConfig.applicationId + "-" + defaultConfig.versionName + "-" + variant.buildType.name + ".apk"
            if (highAGP) {
                output.outputFileName = fileName
            } else {
                def file = output.outputFile
                if (file != null && file.name.endsWith(".apk")) {
                    output.outputFile = new File(file.parent, fileName)
                }
            }
        }

        def assembleTask = tasks.getByName("assemble${variant.name.capitalize()}")
        assembleTask.doLast {
            def targetDir = "${project(":HostApp").projectDir}/src/main/assets/pluginapp"
            def targetApk = new File(targetDir, fileName)
            if (targetApk.exists()) {
                targetApk.delete()
            }

            copy {
                if (highAGP) {
                    from "${project.buildDir}/outputs/apk/${variant.name}"
                } else {
                    from "${project.buildDir}/outputs/apk"
                }

                into targetDir
                include "**.apk"
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    if (isPluginBuild) {
        provided files("hostlibs/android_support_26.1.0.jar")
        provided files("hostlibs/fresco_1.9.0.jar")
        compile "com.qiyi.video.allclasses:commonres_lib:9.5.0"    // commonres_lib
    } else {
        compile "com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}"
        compile "com.android.support:support-annotations:${ANDROID_SUPPORT_VERSION}"
        compile "com.android.support:support-v4:${ANDROID_SUPPORT_VERSION}"
        compile "com.android.support:recyclerview-v7:${ANDROID_SUPPORT_VERSION}"
        compile "com.facebook.fresco:fresco:${FRESCO_VERSION}"
        compile "com.airbnb.android:lottie:${LOTTIE_VERSION}"
    }
}

